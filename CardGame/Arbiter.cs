// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System.Collections.Generic;
using System.Collections;

namespace AssemblyCSharp
{
	public class Arbiter
	{
		private Player playerOne;
		private Player playerTwo;
		private int currentTurn;
		private int counter;
		private bool hasWinner;

		public Arbiter(Player pOne, Player pTwo)
		{
			playerOne = pOne;
			playerTwo = pTwo;
			currentTurn = 1;
			counter = 0;
			hasWinner = false;
		}

		public Player PlayerTwo
		{
			get{ return playerTwo;}
		}

		public Player PlayerOne
		{
			get{ return playerOne; }
		}

		public int Counter
		{
			get{ return counter; }
		}

		/// <summary>
		/// Deals damage to target
		/// </summary>
		/// <param name="target">Target.</param>
		/// <param name="inPlay">In play.</param>
		public void DealDamage(Card target, Card inPlay)
		{
			int damage = 0;

			if (CheckWeakness (target.GetCardType (), inPlay.GetCardType ()))
				damage = inPlay.GetPower () * 2;
			else if (CheckResistance (target.GetCardType (), inPlay.GetCardType ()))
				damage = inPlay.GetPower () / 2;
			else
				damage = inPlay.GetPower();


			target.SustainHit (damage);

			Debug.Log (inPlay.GetName () + " deals " + damage  + " damage on " +  target.GetName ());
			Debug.Log (target.GetName () + " has " + target.GetHitPoints () + " points left");
		}

		public bool CheckWeakness(Card.ServantType attacked, Card.ServantType attacking)
		{
			switch(attacked)
			{
			case Card.ServantType.Saber:
				if(attacking == Card.ServantType.Archer)
					return true;
				break;
			case Card.ServantType.Archer:
				if(attacking == Card.ServantType.Lancer)
					return true;
				break;
			case Card.ServantType.Lancer:
				if(attacking == Card.ServantType.Saber)
					return true;
				break;
			case Card.ServantType.Rider:
				if(attacking == Card.ServantType.Assassin)
					return true;
				break;
			case Card.ServantType.Caster:
				if(attacking == Card.ServantType.Rider)
					return true;
				break;
			case Card.ServantType.Assassin:
				if(attacking == Card.ServantType.Caster)
					return true;
				break;
			case Card.ServantType.Berserker:
				return true;
			}
			return false;
		}

		public bool CheckResistance(Card.ServantType attacked, Card.ServantType attacking)
		{
			switch(attacked)
			{
			case Card.ServantType.Saber:
				if(attacking == Card.ServantType.Lancer)
					return true;
				break;
			case Card.ServantType.Archer:
				if(attacking == Card.ServantType.Saber)
					return true;
				break;
			case Card.ServantType.Lancer:
				if(attacking == Card.ServantType.Archer)
					return true;
				break;
			case Card.ServantType.Rider:
				if(attacking == Card.ServantType.Caster)
					return true;
				break;
			case Card.ServantType.Caster:
				if(attacking == Card.ServantType.Assassin)
					return true;
				break;
			case Card.ServantType.Assassin:
				if(attacking == Card.ServantType.Rider)
					return true;
				break;
			case Card.ServantType.Berserker:
				return false;
			}
			return false;		
		}

		public void DealCard(Card c)
		{
			if(counter%2 == 0)
			{
				if(!playerOne.HandIsFull())
				{
					playerOne.DrawCard (c);
					Debug.Log(playerOne.GetName() + " draws " + c.GetName());
				}
			}
			else if(counter%2 == 1)
			{
				if(!playerTwo.HandIsFull())
				{
					playerTwo.DrawCard(c);
					Debug.Log(playerTwo.GetName() + " draws " + c.GetName());
				}
			}

			counter++;
		}

		public bool HasWinner()
		{
			if (hasWinner)
				return true;
			else
				return false;
		}
	}
}

